pipeline {
    agent {label 'pi'}
    stages {
        stage('Check out artifact') {
            steps {
                echo 'Checkout'
                sh '''
                cd CC2
                rm -rf *.bin*
                if [ -f version ]; then
                    rm version
                fi
                wget http://192.168.2.73:8080/job/oe-build/job/master/lastSuccessfulBuild/artifact/deploy-ccu/upgrade-ccu-dev.bin
                wget http://192.168.2.73:8080/job/oe-build/job/master/lastSuccessfulBuild/artifact/deploy-ccu/version
                '''
            }
        }
        stage('Trigger Update') {
            steps {
                    sh '''#!/usr/bin/env bash
                        cd CC2
                        python3 -m http.server 8000 &
                        echo Update|nc -w 10 localhost 8001
                    '''
            }
        }
        stage('Test firmware update') {
            steps {
                echo 'update'
                timeout(time: 600, unit: 'SECONDS') {
                    sh '''#!/usr/bin/env bash
                        while true
                        do
                            re=$(echo tm fsn|nc -w 20 localhost 8001)
                            echo $re
                            isJson=$(echo $re | jq -r type)
                            echo $isJson
                            if [[ $isJson == *"error"* ]]
                            then
                                echo Error
                                exit 1
                            else
                                re=$(echo $re|jq -r '.status.updatestatus)
                            fi

                            if [[ $re == *"Installed"* ]]
                            then
                                echo reboot|nc -w 10 localhost 8001
                                echo Installed
                                exit 0
                            elif [[ $re == *"DownloadFailed"* ]] || [[ $re == *"InstallationFailed"* ]]
                            then
                                echo Failed
                                exit 1
                            fi
                        done
                    '''
                }
            }
        }

        stage('Run test') {
            steps {
                echo 'RUN'
                timeout(time: 500, unit: 'SECONDS') {
                    sh '''#!/usr/bin/env bash
                        cd CC2/feature
                        while true
                        do
                            re=$(echo quit|nc -w 20 localhost 8001)
                            isJson=$(echo $re | jq -r type)
                            if [[ $isJson == *"error"* ]]
                            then
                                continue
                            else
                                break
                            fi
                        done

                        behave --junit
                    '''
                }
            }
        }
    }
    post {
        always {
            junit 'CC2/feature/reports/*.xml'
        }
    }
}
