pipeline {
    agent { label 'pi' }
    parameters {
        booleanParam(name: 'installOCL', defaultValue: false)
        string(name: 'branchOCL', defaultValue: 'master', trim: true)
        string(name: 'branch', defaultValue: 'master', trim: true)
        string(name: 'binaryFileName', defaultValue: 'upgrade-ccu-dev.bin', trim: true)
        string(name: 'versionFileName', defaultValue: 'version-ccu-dev-image', trim: true)
        string(name: "targetEnvironment", defaultValue: "default", description: "Pipeline name")
        string(name: "buildNumber", defaultValue: "default", description: "Pipeline build number")
    }
    triggers {
        upstream(upstreamProjects: params.targetEnvironment, threshold: hudson.model.Result.SUCCESS)
    }
    stages {
        // stage('Check out artifact') {
        //     steps {
        //         script {
        //             echo 'Checkout'
        //             sh '''
        //               cd CC2
        //               rm -rf *.bin* feature/reports
        //               if [ -f version ]; then rm version
        //               fi
        //             '''
        //             if (params.targetEnvironment == 'default') {
        //                 echo "Take the latest successful from oe-build pipeline"
        //                 sh """
        //                   cd CC2
        //                   wget http://sevikci01.creatorctek.local:8080/job/oe-build/job/${params.branch}/lastSuccessfulBuild/artifact/deploy-ccu/${params.binaryFileName} -O upgrade.bin
        //                   wget http://sevikci01.creatorctek.local:8080/job/oe-build/job/${params.branch}/lastSuccessfulBuild/artifact/deploy-ccu/${params.versionFileName} -O version
        //                 """
        //             } else {
        //                 echo "Push from a build pipeline"
        //                 step ([$class: 'CopyArtifact',
        //                     projectName: params.targetEnvironment,
        //                     filter: "deploy-ccu/upgrade-ccu-dev.bin, deploy-ccu/version",
        //                     selector: specific(params.buildNumber),
        //                     target: '']);
        //                 sh """
        //                     cd CC2
        //                     mv deploy-ccu/${params.binaryFileName} upgrade.bin
        //                     mv deploy-ccu/${params.versionFileName} version
        //                 """
        //             }

        //         }
        //     }
        // }
        // stage('Trigger Update') {
        //     steps {
        //             timeout(time: 800, unit: 'SECONDS') {
        //                 sh './CC2/startupCentralSystem.sh'
        //             }
        //     }
        // }
        // stage('Test firmware update') {
        //     steps {
        //         timeout(time: 600, unit: 'SECONDS') {
        //             sh './CC2/test_firmware.sh'
        //         }
        //     }
        // }
        stage('Deploy OCL firmware') {
            when { environment name: 'installOCL', value: 'true' } 
            steps {
                sh """
                cd CC2
                wget http://http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/${params.branch}/lastSuccessfulBuild/artifact/build-ocl/firmware.version
                wget http://http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/${params.branch}/lastSuccessfulBuild/artifact/build-ocl/src/app/app_ocl.hex
                ./CC2/deployOCL.sh
                """
            }
        }
        stage('Run test') {
            steps {
                echo 'RUN'
                timeout(time: 500, unit: 'SECONDS') {
                    sh '''#!/usr/bin/env bash
                        ./CC2/checkCS.sh
                        cd CC2/feature
                        behave --junit
                    '''
                }
            }
        }
    }
    post {
        always {
            junit 'CC2/feature/reports/*.xml'
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true)
        }
    }
}
