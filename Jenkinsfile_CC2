pipeline {
    agent { label 'pi' }
    parameters {
        booleanParam(name: 'updateOCL', defaultValue: false, description: "Update new software for OCL")
        string(name: "branchOCL", defaultValue: 'master', description: "branch of OCL", trim: true)
        string(name: "OCLhex", defaultValue: 'app_ocl.hex', description: "hex file name", trim: true)
        string(name: "OCLversion", defaultValue: 'firmware.version', description: "version file name", trim: true)
        booleanParam(name: 'updateCCU', defaultValue: false, description: "Update new software for CCU")
        string(name: 'branchCCU', defaultValue: 'master', trim: true, , description: "oe build branch to test")
        string(name: 'ccuBinary', defaultValue: 'upgrade-ccu-dev.bin', trim: true)
        string(name: 'ccuVersion', defaultValue: 'version-ccu-dev-image', trim: true)
        string(name: "targetEnvironment", defaultValue: "default", description: "Pipeline name")
        string(name: "buildNumber", defaultValue: "default", description: "Pipeline build number")
    }
    stages {
        stage('Check out CCU artifact') {
            when { environment name: 'updateCCU', value: 'true' }
            steps {
                script {
                    echo 'Checkout'
                    sh '''
                      cd CC2
                      rm -rf *.bin* feature/reports version
                    '''
                    if (params.targetEnvironment == 'default') {
                        echo "Take the latest successful from oe-build pipeline"
                        sh """
                          cd CC2
                          wget http://sevikci01.creatorctek.local:8080/job/oe-build/job/${params.branchCCU}/lastSuccessfulBuild/artifact/deploy-ccu/${params.ccuBinary} -O upgrade.bin
                          if [ \$? -ne 0 ]; then exit 1; fi
                          wget http://sevikci01.creatorctek.local:8080/job/oe-build/job/${params.branchCCU}/lastSuccessfulBuild/artifact/deploy-ccu/${params.ccuVersion} -O version
                          if [ \$? -ne 0 ]; then exit 1; fi
                        """
                    } else {
                        echo "Push from a build pipeline"
                        step ([$class: 'CopyArtifact',
                            projectName: params.targetEnvironment,
                            filter: "deploy-ccu/${params.ccuBinary}, deploy-ccu/${params.ccuVersion}",
                            selector: specific(params.buildNumber),
                            target: 'CC2']);
                        sh """
                            cd CC2
                            mv deploy-ccu/${params.ccuBinary} upgrade.bin
                            mv deploy-ccu/${params.ccuBinary} version
                        """
                    }

                }
            }
        }
        // stage('Startup test station') {
        //     steps {
        //             timeout(time: 800, unit: 'SECONDS') {
        //                 sh './CC2/startupCentralSystem.sh'
        //             }
        //     }
        // }
        stage('Trigger CCU firmware update') {
            when { environment name: 'updateCCU', value: 'true' }
            steps {
                timeout(time: 600, unit: 'SECONDS') {
                    sh './CC2/updatesoftwareCCU.sh'
                }
            }
        }

        stage('Deploy OCL firmware') {
            when { environment name: 'updateOCL', value: 'true' }
            steps {
                timeout(time: 800, unit: 'SECONDS') {
                    dir('CC2') {
                        sh '''#!/usr/bin/env bash
                        ./checkCS.sh
                        rm -rf *.hex* *firmware.version*
                       
                        '''
                        script{
                        if (params.branchOCL.contains('/')) { 
                            OCL = "view/change-requests/job/" + params.branchOCL.replace('/', '%252F')
                        } else {
                            OCL = params.branchOCL
                        }
                        sh """
                            wget http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/${OCL}/lastSuccessfulBuild/artifact/build-ocl/src/app/${params.OCLhex} -O ocl_firmware.hex
                            if [ \$? -ne 0 ]
                            then
                                wget http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/${OCL}/lastSuccessfulBuild/artifact/main_ocl.hex -O ocl_firmware.hex
                                echo 'aaaaaaaa'
                                if [ \$? -ne 0 ]; then echo 'bb'; fi
                            fi
                            wget http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/${OCL}/lastSuccessfulBuild/artifact/build-ocl/${params.OCLversion}  -O ocl_firmware.version
                            if [ \$? -ne 0 ]
                            then
                                wget wget http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/${OCL}/lastSuccessfulBuild/artifact/firmware.version  -O ocl_firmware.version
                                if [ \$? -ne 0 ]; then exit 1; fi
                            fi
                        """
                        sh './updateOCL.sh'
                        }
                    }
                }
            }
        }
        // stage('Run smoke test') {
        //     steps {
        //         timeout(time: 500, unit: 'SECONDS') {
        //             script {
        //                 sh './CC2/checkCS.sh'
        //                 if (params.updateCCU == true) {
        //                     sh '''
        //                     cd CC2/feature
        //                     behave -i smoke.feature --junit '''
        //                 }
        //                 else {
        //                     sh '''
        //                     cd CC2/feature
        //                     behave -i smoke.feature --tags="not @ccu" --junit '''
        //                 }
        //             }
        //         }
        //     }
        // }
        // stage('Run integration test') {
        //     steps {
        //         echo 'RUN'
        //         timeout(time: 500, unit: 'SECONDS') {
        //             sh '''#!/usr/bin/env bash
        //                 cd CC2/feature
        //                 behave -i integration.feature --junit
        //             '''
        //         }
        //     }
        // }
    }
    post {
        always {
            junit 'CC2/feature/reports/*.xml'
        }
    }
}
