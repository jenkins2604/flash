pipeline {
    agent { label 'pi' }
    parameters {
        booleanParam(name: 'updateOCL', defaultValue: false, description: "Update new software for OCL")
        string(name: "LinkToOclVersionFile", defaultValue: "http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/master/lastSuccessfulBuild/artifact/build-ocl/firmware.version", trim: true)
        string(name: "LinkToOclHexFile", defaultValue: 'http://sevikci01.creatorctek.local:8080/job/OCU-multibranch/job/master/lastSuccessfulBuild/artifact/build-ocl/src/app/app_ocl.hex', trim: true)
        booleanParam(name: 'updateCCU', defaultValue: false, description: "Update new software for CCU")
        string(name: 'branch', defaultValue: 'master', trim: true)
        string(name: 'CCUbinaryFileName', defaultValue: 'upgrade-ccu-dev.bin', trim: true)
        string(name: 'CCUversionFileName', defaultValue: 'version-ccu-dev-image', trim: true)
        string(name: "targetEnvironment", defaultValue: "default", description: "Pipeline name")
        string(name: "buildNumber", defaultValue: "default", description: "Pipeline build number")
    }
    triggers {
        upstream(upstreamProjects: params.targetEnvironment, threshold: hudson.model.Result.SUCCESS)
    }
    stages {
        stage('Check out CCU artifact') {
            when { environment name: 'updateCCU', value: 'true' }
            steps {
                script {
                    echo 'Checkout'
                    sh '''
                      cd CC2
                      rm -rf *.bin* *.hex* feature/reports *version*
                    '''
                    if (params.targetEnvironment == 'default') {
                        echo "Take the latest successful from oe-build pipeline"
                        sh """
                          cd CC2
                          wget http://sevikci01.creatorctek.local:8080/job/oe-build/job/${params.branch}/lastSuccessfulBuild/artifact/deploy-ccu/${params.CCUbinaryFileName} -O upgrade.bin
                          wget http://sevikci01.creatorctek.local:8080/job/oe-build/job/${params.branch}/lastSuccessfulBuild/artifact/deploy-ccu/${params.CCUversionFileName} -O version
                        """
                    } else {
                        echo "Push from a build pipeline"
                        step ([$class: 'CopyArtifact',
                            projectName: params.targetEnvironment,
                            filter: "deploy-ccu/upgrade-ccu-dev.bin, deploy-ccu/version",
                            selector: specific(params.buildNumber),
                            target: '']);
                        sh """
                            cd CC2
                            mv deploy-ccu/${params.CCUbinaryFileName} upgrade.bin
                            mv deploy-ccu/${params.CCUversionFileName} version
                        """
                    }

                }
            }
        }
        // stage('Startup test station') {
        //     steps {
        //             timeout(time: 800, unit: 'SECONDS') {
        //                 sh './CC2/startupCentralSystem.sh'
        //             }
        //     }
        // }
        
        stage('Trigger CCU firmware update') {
            when { environment name: 'updateCCU', value: 'true' }
            steps {
                timeout(time: 600, unit: 'SECONDS') {
                    sh './CC2/updatefirmware.sh'
                }
            }
        }

        stage('Deploy OCL firmware') {
            when { environment name: 'updateOCL', value: 'true' }
            steps {
                timeout(time: 800, unit: 'SECONDS') {
                    echo "${params.LinkToOclVersionfile} "
                    sh """#!/usr/bin/env bash
                    ./CC2/checkCS.sh
                    cd CC2
                    wget ${params.LinkToOclVersionfile} -O ocl_firmware.version
                    if [ \$? -ne 0 ]; then exit 1; fi
                    wget ${params.LinkToOclHexfile} -O ocl_firmware.hex
                    if [ \$? -ne 0 ]; then exit 1; fi
                    ./updateOCL.sh
                    """
                }
            }
        }
        stage('Run smoke test') {
            steps {
                echo 'RUN'
                timeout(time: 500, unit: 'SECONDS') {
                    sh '''#!/usr/bin/env bash
                        ./CC2/checkCS.sh
                        cd CC2/feature
                        behave -i smoke.feature --junit
                    '''
                }
            }
        }
        stage('Run integration test') {
            steps {
                echo 'RUN'
                timeout(time: 500, unit: 'SECONDS') {
                    sh '''#!/usr/bin/env bash
                        cd CC2/feature
                        behave -i integration.feature --junit
                    '''
                }
            }
        }
    }
    post {
        always {
            junit 'CC2/feature/reports/*.xml'
        }
    }
}
